using System;
using System.Threading.Tasks;
using System.Xml.Linq;
using Alchemy4Tridion.Plugins.Clients.CoreService;

namespace Alchemy4Tridion.Plugins.Clients
{
    public interface IAlchemyCoreServiceClient : IDisposable
    {
        SessionAwareCoreServiceEndPoint? ClientEndpoint { get; }
        string ImpersonatedUsername { get; }

        WorkItemData[] AddToWorkflow(string[] subjectIds, string activityInstanceId, ReadOptions readBackOptions = null);
        Task<WorkItemData[]> AddToWorkflowAsync(string[] subjectIds, string activityInstanceId, ReadOptions readBackOptions = null);
        ActionFlags CastActions(int numericActions);
        Task<ActionFlags> CastActionsAsync(int numericActions);
        PredefinedQueue? CastPredefinedQueue(int queueId);
        Task<PredefinedQueue?> CastPredefinedQueueAsync(int queueId);
        VersionedItemData CheckIn(string id, bool removePermanentLock, string userComment, ReadOptions readBackOptions = null);
        Task<VersionedItemData> CheckInAsync(string id, bool removePermanentLock, string userComment, ReadOptions readBackOptions = null);
        VersionedItemData CheckOut(string id, bool permanentLock = false, ReadOptions readBackOptions = null);
        Task<VersionedItemData> CheckOutAsync(string id, bool permanentLock = false, ReadOptions readBackOptions = null);
        ClassificationInfoData Classify(string id, string[] keywordIds, ReadOptions readOptions = null);
        Task<ClassificationInfoData> ClassifyAsync(string id, string[] keywordIds, ReadOptions readOptions = null);
        void Close();
        XElement ConvertSchemaFieldsToXsd(SchemaFieldsData schemaFieldsData);
        Task<XElement> ConvertSchemaFieldsToXsdAsync(SchemaFieldsData schemaFieldsData);
        XElement ConvertSearchQueryToXml(SearchQueryData searchQueryData);
        Task<XElement> ConvertSearchQueryToXmlAsync(SearchQueryData searchQueryData);
        SearchQueryData ConvertXmlToSearchQuery(XElement searchQueryXml);
        Task<SearchQueryData> ConvertXmlToSearchQueryAsync(XElement searchQueryXml);
        RepositoryLocalObjectData Copy(string id, string destinationId, bool makeUnique, ReadOptions readBackOptions = null);
        Task<RepositoryLocalObjectData> CopyAsync(string id, string destinationId, bool makeUnique, ReadOptions readBackOptions = null);
        KeywordData CopyToKeyword(string sourceKeywordId, string destinationId, ReadOptions readBackOptions = null);
        Task<KeywordData> CopyToKeywordAsync(string sourceKeywordId, string destinationId, ReadOptions readBackOptions = null);
        IdentifiableObjectData Create(IdentifiableObjectData data, ReadOptions readBackOptions = null);
        Task<IdentifiableObjectData> CreateAsync(IdentifiableObjectData data, ReadOptions readBackOptions = null);
        void DecommissionPublicationTarget(string publicationTargetId);
        Task DecommissionPublicationTargetAsync(string publicationTargetId);
        void Delete(string id);
        void DeleteApplicationData(string subjectId, string applicationId);
        Task DeleteApplicationDataAsync(string subjectId, string applicationId);
        Task DeleteAsync(string id);
        void DeleteTaxonomyNode(string id, DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        Task DeleteTaxonomyNodeAsync(string id, DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        void Dispose();
        void EnlistInTransaction();
        Task EnlistInTransactionAsync();
        ActivityInstanceData FinishActivity(string activityInstanceId, ActivityFinishData activityFinishData, ReadOptions readOptions = null);
        Task<ActivityInstanceData> FinishActivityAsync(string activityInstanceId, ActivityFinishData activityFinishData, ReadOptions readOptions = null);
        ProcessHistoryData ForceFinishProcess(string processInstanceId, string approvalStatusId, ReadOptions readOptions = null);
        Task<ProcessHistoryData> ForceFinishProcessAsync(string processInstanceId, string approvalStatusId, ReadOptions readOptions = null);
        string GetApiVersion();
        Task<string> GetApiVersionAsync();
        string[] GetApplicationIds();
        Task<string[]> GetApplicationIdsAsync();
        SecurityDescriptorDataDictionary GetContentSecurityDescriptorsForOrgItemIds(string[] organizationalItemIds);
        Task<SecurityDescriptorDataDictionary> GetContentSecurityDescriptorsForOrgItemIdsAsync(string[] organizationalItemIds);
        UserData GetCurrentUser();
        Task<UserData> GetCurrentUserAsync();
        AccessTokenData GetCurrentUserWithToken();
        Task<AccessTokenData> GetCurrentUserWithTokenAsync();
        IdentifiableObjectData GetDefaultData(ItemType itemType, string containerId, ReadOptions readOptions = null);
        Task<IdentifiableObjectData> GetDefaultDataAsync(ItemType itemType, string containerId, ReadOptions readOptions = null);
        TridionEnumValue[] GetEnumValues(string type);
        Task<TridionEnumValue[]> GetEnumValuesAsync(string type);
        BinaryContentData GetExternalBinaryContentData(string uri);
        Task<BinaryContentData> GetExternalBinaryContentDataAsync(string uri);
        InstanceData GetInstanceData(string schemaId, string containerItemId, ReadOptions readOptions = null);
        Task<InstanceData> GetInstanceDataAsync(string schemaId, string containerItemId, ReadOptions readOptions = null);
        IdentifiableObjectData[] GetList(string id, SubjectRelatedListFilterData filter);
        Task<IdentifiableObjectData[]> GetListAsync(string id, SubjectRelatedListFilterData filter);
        DirectoryServiceUser[] GetListDirectoryServiceAllUsers(string directoryServiceName);
        Task<DirectoryServiceUser[]> GetListDirectoryServiceAllUsersAsync(string directoryServiceName);
        DirectoryServiceUser[] GetListDirectoryServiceGroupMembers(string directoryServiceName, string groupDN);
        Task<DirectoryServiceUser[]> GetListDirectoryServiceGroupMembersAsync(string directoryServiceName, string groupDN);
        string[] GetListDirectoryServiceNames();
        Task<string[]> GetListDirectoryServiceNamesAsync();
        DirectoryServiceUser[] GetListDirectoryServiceUsers(string directoryServiceName, DirectoryUsersFilter filter);
        Task<DirectoryServiceUser[]> GetListDirectoryServiceUsersAsync(string directoryServiceName, DirectoryUsersFilter filter);
        XElement GetListExternalLinks(string id);
        Task<XElement> GetListExternalLinksAsync(string id);
        PublicationType[] GetListPublicationTypes();
        Task<PublicationType[]> GetListPublicationTypesAsync();
        PublishInfoData[] GetListPublishInfo(string itemId);
        Task<PublishInfoData[]> GetListPublishInfoAsync(string itemId);
        QueueMessageData[] GetListQueueMessages(int queueId);
        Task<QueueMessageData[]> GetListQueueMessagesAsync(int queueId);
        QueueData[] GetListQueues();
        Task<QueueData[]> GetListQueuesAsync();
        TemplateType[] GetListTemplateTypes(ItemType? itemType = default(ItemType?));
        Task<TemplateType[]> GetListTemplateTypesAsync(ItemType? itemType = default(ItemType?));
        WindowsUser[] GetListWindowsDomainUsers(string domainName);
        Task<WindowsUser[]> GetListWindowsDomainUsersAsync(string domainName);
        WorkflowScriptType[] GetListWorkflowScriptTypes();
        Task<WorkflowScriptType[]> GetListWorkflowScriptTypesAsync();
        XElement GetListXml(string id, SubjectRelatedListFilterData filter);
        Task<XElement> GetListXmlAsync(string id, SubjectRelatedListFilterData filter);
        string GetPredefinedBatchOperationName(PredefinedBatchOperation operation);
        Task<string> GetPredefinedBatchOperationNameAsync(PredefinedBatchOperation operation);
        ProcessDefinitionAssociationDictionary GetProcessDefinitionsForItems(string[] itemIds, ProcessDefinitionType processDefinitionType);
        Task<ProcessDefinitionAssociationDictionary> GetProcessDefinitionsForItemsAsync(string[] itemIds, ProcessDefinitionType processDefinitionType);
        LinkToSchemaData[] GetSchemasByNamespaceUri(string repositoryId, string namespaceUri, string rootElementName);
        Task<LinkToSchemaData[]> GetSchemasByNamespaceUriAsync(string repositoryId, string namespaceUri, string rootElementName);
        IdentifiableObjectData[] GetSearchResults(SearchQueryData filter);
        Task<IdentifiableObjectData[]> GetSearchResultsAsync(SearchQueryData filter);
        IdentifiableObjectData[] GetSearchResultsPaged(SearchQueryData filter, int startRowIndex, int maxRows);
        Task<IdentifiableObjectData[]> GetSearchResultsPagedAsync(SearchQueryData filter, int startRowIndex, int maxRows);
        XElement GetSearchResultsXml(SearchQueryData filter);
        Task<XElement> GetSearchResultsXmlAsync(SearchQueryData filter);
        XElement GetSearchResultsXmlPaged(SearchQueryData filter, int startRowIndex, int maxRows);
        Task<XElement> GetSearchResultsXmlPagedAsync(SearchQueryData filter, int startRowIndex, int maxRows);
        SecurityDescriptorDataDictionary GetSecurityDescriptorsForSubjectsIds(string[] subjectIds);
        Task<SecurityDescriptorDataDictionary> GetSecurityDescriptorsForSubjectsIdsAsync(string[] subjectIds);
        string GetSessionId();
        Task<string> GetSessionIdAsync();
        int GetSessionTransactionTimeout();
        Task<int> GetSessionTransactionTimeoutAsync();
        ArrayOfTcmUri GetSubjectIdsWithApplicationData(string applicationId);
        Task<ArrayOfTcmUri> GetSubjectIdsWithApplicationDataAsync(string applicationId);
        IdentifiableObjectData[] GetSystemWideList(SystemWideListFilterData filter);
        Task<IdentifiableObjectData[]> GetSystemWideListAsync(SystemWideListFilterData filter);
        XElement GetSystemWideListXml(SystemWideListFilterData filter);
        Task<XElement> GetSystemWideListXmlAsync(SystemWideListFilterData filter);
        string GetSystemXsd(string filename);
        Task<string> GetSystemXsdAsync(string filename);
        string GetTcmUri(string baseUri, string contextRepositoryUri, uint? version = default(uint?));
        Task<string> GetTcmUriAsync(string baseUri, string contextRepositoryUri, uint? version = default(uint?));
        TridionLanguageInfo[] GetTridionLanguages();
        Task<TridionLanguageInfo[]> GetTridionLanguagesAsync();
        SchemaData GetVirtualFolderTypeSchema(string namespaceUri);
        Task<SchemaData> GetVirtualFolderTypeSchemaAsync(string namespaceUri);
        RenderedItemData GetWorkItemSnapshot(string workItemId);
        Task<RenderedItemData> GetWorkItemSnapshotAsync(string workItemId);
        UserData Impersonate(string username);
        Task<UserData> ImpersonateAsync(string username);
        bool IsExistingObject(string id);
        Task<bool> IsExistingObjectAsync(string id);
        bool IsPublished(string itemId, string publicationTargetId, bool isPublishedInContext);
        Task<bool> IsPublishedAsync(string itemId, string publicationTargetId, bool isPublishedInContext);
        bool IsValidTridionWebSchemaXml(SchemaData data);
        Task<bool> IsValidTridionWebSchemaXmlAsync(SchemaData data);
        RepositoryLocalObjectData Localize(string id, ReadOptions readBackOptions = null);
        Task<RepositoryLocalObjectData> LocalizeAsync(string id, ReadOptions readBackOptions = null);
        OrganizationalItemData Lock(string organizationalItemId, ReadOptions readBackOptions = null);
        Task<OrganizationalItemData> LockAsync(string organizationalItemId, ReadOptions readBackOptions = null);
        RepositoryLocalObjectData Move(string id, string destinationId, ReadOptions readBackOptions = null);
        Task<RepositoryLocalObjectData> MoveAsync(string id, string destinationId, ReadOptions readBackOptions = null);
        KeywordData MoveToKeyword(string sourceKeywordId, string destinationId, ReadOptions readBackOptions = null);
        Task<KeywordData> MoveToKeywordAsync(string sourceKeywordId, string destinationId, ReadOptions readBackOptions = null);
        PredefinedBatchOperation? ParsePredefinedBatchOperation(string operation);
        Task<PredefinedBatchOperation?> ParsePredefinedBatchOperationAsync(string operation);
        RenderedItemData PreviewItem(RepositoryLocalObjectData itemData, TemplateData templateData, PublishInstructionData publishInstruction, string publicationTargetId);
        Task<RenderedItemData> PreviewItemAsync(RepositoryLocalObjectData itemData, TemplateData templateData, PublishInstructionData publishInstruction, string publicationTargetId);
        OperationResultDataOfRepositoryLocalObjectData Promote(string id, string destinationRepositoryId, OperationInstruction instruction, ReadOptions readBackOptions);
        Task<OperationResultDataOfRepositoryLocalObjectData> PromoteAsync(string id, string destinationRepositoryId, OperationInstruction instruction, ReadOptions readBackOptions);
        PublishTransactionData[] Publish(string[] ids, PublishInstructionData publishInstruction, string[] targets, PublishPriority? priority = default(PublishPriority?), ReadOptions readOptions = null);
        Task<PublishTransactionData[]> PublishAsync(string[] ids, PublishInstructionData publishInstruction, string[] targets, PublishPriority? priority = default(PublishPriority?), ReadOptions readOptions = null);
        void PurgeApplicationData(string applicationId);
        Task PurgeApplicationDataAsync(string applicationId);
        int PurgeOldVersions(PurgeOldVersionsInstructionData instruction);
        Task<int> PurgeOldVersionsAsync(PurgeOldVersionsInstructionData instruction);
        void PurgeQueue(int queueId);
        Task PurgeQueueAsync(int queueId);
        IdentifiableObjectData Read(string id);
        IdentifiableObjectData Read(string id, ReadOptions readOptions);
        ApplicationData[] ReadAllApplicationData(string subjectId);
        Task<ApplicationData[]> ReadAllApplicationDataAsync(string subjectId);
        ApplicationData ReadApplicationData(string subjectId, string applicationId);
        Task<ApplicationData> ReadApplicationDataAsync(string subjectId, string applicationId);
        ApplicationDataDictionary ReadApplicationDataForSubjectsIds(string[] subjectIds, string[] applicationIds);
        Task<ApplicationDataDictionary> ReadApplicationDataForSubjectsIdsAsync(string[] subjectIds, string[] applicationIds);
        Task<IdentifiableObjectData> ReadAsync(string id, ReadOptions readOptions = null);
        SchemaFieldsData ReadSchemaFields(string schemaId, bool expandEmbeddedFields, ReadOptions readOptions = null);
        Task<SchemaFieldsData> ReadSchemaFieldsAsync(string schemaId, bool expandEmbeddedFields, ReadOptions readOptions = null);
        ActivityInstanceData ReAssignActivity(string activityInstanceId, string newAssigneeId, ReadOptions readBackOptions = null);
        Task<ActivityInstanceData> ReAssignActivityAsync(string activityInstanceId, string newAssigneeId, ReadOptions readBackOptions = null);
        ClassificationInfoData ReClassify(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, ReadOptions readOptions = null);
        Task<ClassificationInfoData> ReClassifyAsync(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, ReadOptions readOptions = null);
        void ReIndex(string id);
        Task ReIndexAsync(string id);
        WorkItemData[] RemoveFromWorkflow(string[] subjectIds, ReadOptions readBackOptions = null);
        Task<WorkItemData[]> RemoveFromWorkflowAsync(string[] subjectIds, ReadOptions readBackOptions = null);
        RenderedItemData RenderItem(string itemId, string templateId, PublishInstructionData publishInstruction, string publicationTargetId);
        Task<RenderedItemData> RenderItemAsync(string itemId, string templateId, PublishInstructionData publishInstruction, string publicationTargetId);
        BundleTypeData[] ResolveBundleTypes(string[] itemIds, bool pruneTree);
        Task<BundleTypeData[]> ResolveBundleTypesAsync(string[] itemIds, bool pruneTree);
        PublishContextData[] ResolveItems(string[] ids, ResolveInstructionData resolveInstruction, string[] targets, ReadOptions readOptions = null);
        Task<PublishContextData[]> ResolveItemsAsync(string[] ids, ResolveInstructionData resolveInstruction, string[] targets, ReadOptions readOptions = null);
        ActivityInstanceData RestartActivity(string activityInstanceId, ReadOptions readBackOptions = null);
        Task<ActivityInstanceData> RestartActivityAsync(string activityInstanceId, ReadOptions readBackOptions = null);
        ActivityInstanceData ResumeActivity(string activityInstanceId, ReadOptions readOptions = null);
        Task<ActivityInstanceData> ResumeActivityActivity(string activityInstanceId, ReadOptions readOptions = null);
        VersionedItemData Rollback(string id, bool deleteVersions, string comment, ReadOptions readBackOptions = null);
        Task<VersionedItemData> RollbackAsync(string id, bool deleteVersions, string comment, ReadOptions readBackOptions = null);
        IdentifiableObjectData Save(IdentifiableObjectData deltaData, ReadOptions readBackOptions = null);
        void SaveApplicationData(string subjectId, ApplicationData[] applicationData);
        Task SaveApplicationDataAsync(string subjectId, ApplicationData[] applicationData);
        Task<IdentifiableObjectData> SaveAsync(IdentifiableObjectData deltaData, ReadOptions readBackOptions = null);
        void SetSessionContextData(ApplicationData appData);
        Task SetSessionContextDataAsync(ApplicationData appData);
        void SetSessionTransactionTimeout(int transactionTimeout);
        Task SetSessionTransactionTimeoutAsync(int transactionTimeout);
        void SetWebDavUrlPrefix(string prefix);
        Task SetWebDavUrlPrefixAsync(string prefix);
        ActivityInstanceData StartActivity(string activityInstanceId, ReadOptions readBackOptions = null);
        Task<ActivityInstanceData> StartActivityAsync(string activityInstanceId, ReadOptions readBackOptions = null);
        bool StartCaching();
        Task<bool> StartCachingAsync();
        ProcessInstanceData StartWorkflow(string repositoryId, StartWorkflowInstructionData instruction, ReadOptions readBackOptions = null);
        Task<ProcessInstanceData> StartWorkflowAsync(string repositoryId, StartWorkflowInstructionData instruction, ReadOptions readBackOptions = null);
        void StopCaching();
        Task StopCachingAsync();
        ActivityInstanceData SuspendActivity(string activityInstanceId, string reason, DateTime? resumeAt, string resumeBookmark, ReadOptions readBackOptions = null);
        Task<ActivityInstanceData> SuspendActivityAsync(string activityInstanceId, string reason, DateTime? resumeAt, string resumeBookmark, ReadOptions readBackOptions = null);
        SynchronizationResult SynchronizeWithSchema(IdentifiableObjectData dataObject, SynchronizeOptions synchronizeOptions);
        SynchronizationResult SynchronizeWithSchemaAndUpdate(string itemId, SynchronizeOptions synchronizeOptions);
        Task<SynchronizationResult> SynchronizeWithSchemaAndUpdateAsync(string itemId, SynchronizeOptions synchronizeOptions);
        Task<SynchronizationResult> SynchronizeWithSchemaAsync(IdentifiableObjectData dataObject, SynchronizeOptions synchronizeOptions);
        void TerminateSession();
        Task TerminateSessionAsync();
        IdentifiableObjectData TryCheckOut(string id, ReadOptions readBackOptions = null);
        Task<IdentifiableObjectData> TryCheckOutAsync(string id, ReadOptions readBackOptions = null);
        string TryGetTcmUri(string baseUri, string contextRepositoryUri, uint? version = default(uint?));
        Task<string> TryGetTcmUriAsync(string baseUri, string contextRepositoryUri, uint? version = default(uint?));
        IdentifiableObjectData TryRead(string id, ReadOptions readOptions = null);
        Task<IdentifiableObjectData> TryReadAsync(string id, ReadOptions readOptions = null);
        ClassificationInfoData UnClassify(string id, string[] keywordIds, ReadOptions readOptions = null);
        Task<ClassificationInfoData> UnClassifyAsync(string id, string[] keywordIds, ReadOptions readOptions = null);
        VersionedItemData UndoCheckOut(string id, bool permanentLock, ReadOptions readBackOptions = null);
        Task<VersionedItemData> UndoCheckOutAsync(string id, bool permanentLock, ReadOptions readBackOptions = null);
        PublishTransactionData UndoPublishTransaction(string publishTransactionId, QueueMessagePriority? priority = default(QueueMessagePriority?), ReadOptions readBackOptions = null);
        Task<PublishTransactionData> UndoPublishTransactionAsync(string publishTransactionId, QueueMessagePriority? priority = default(QueueMessagePriority?), ReadOptions readBackOptions = null);
        RepositoryLocalObjectData UnLocalize(string id, ReadOptions readBackOptions = null);
        Task<RepositoryLocalObjectData> UnLocalizeAsync(string id, ReadOptions readBackOptions = null);
        OrganizationalItemData Unlock(string organizationalItemId, ReadOptions readBackOptions = null);
        Task<OrganizationalItemData> UnlockAsync(string organizationalItemId, ReadOptions readBackOptions = null);
        PublishTransactionData[] UnPublish(string[] ids, UnPublishInstructionData unPublishInstruction, string[] targets, PublishPriority? priority = default(PublishPriority?), ReadOptions readOptions = null);
        Task<PublishTransactionData[]> UnPublishAsync(string[] ids, UnPublishInstructionData unPublishInstruction, string[] targets, PublishPriority? priority = default(PublishPriority?), ReadOptions readOptions = null);
        IdentifiableObjectData Update(IdentifiableObjectData deltaData, ReadOptions readBackOptions = null);
        Task<IdentifiableObjectData> UpdateAsync(IdentifiableObjectData deltaData, ReadOptions readBackOptions = null);
        ValidationErrorData[] Validate(IdentifiableObjectData deltaData);
        Task<ValidationErrorData[]> ValidateAsync(IdentifiableObjectData deltaData);
        void ValidateXml(IdentifiableObjectData data);
        Task ValidateXmlAsync(IdentifiableObjectData data);


    }
}